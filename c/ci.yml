.only_release:
  only:
    - /^release\/v[0-9]+\.[0-9]+\.[0-9]+$/

.only_full:
  rules:
    - changes:
        - c/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

.conanbuild:
  stage: build
  needs: []
  tags:
    - short-jobs
  script:
    - mkdir $BUILD
    - cd $BUILD
    - cmake $CONAN_OPTS -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release ..
    - make
  variables:
    CONAN_OPTS: ""
    BUILD: "build"
  artifacts:
    paths:
      - $BUILD/bin
      - $BUILD/lib
      - $BUILD/rust

gcc8:
  image: docker.slock.it/build-images/cmake:gcc8
  needs: []
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir x64_build
    - mkdir x64_jni
    - cd x64_build
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release  -DUSE_CURL=false -DZKCRYPTO_LIB=true ..
    - make
    - cp lib/libin3.so ../x64_jni/libin3_jni.so
    - rm -rf *
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release -DBUILD_DOC=true -DZKCRYPTO_LIB=true ..
    - make
  artifacts:
    paths:
      - x64_jni
      - x64_build/bin
      - x64_build/lib
      - x64_build/rust
      - x64_build/c/docs/doc_doxygen

win_mingw:
  image: docker.slock.it/build-images/cmake:gcc7-mingw
  extends:
    - .conanbuild
    - .only_full
  variables:
    CONAN_OPTS: "-DUSE_CURL=false -DUSE_WINHTTP=true"
    BUILD: "win_build"

win_jni:
  image: docker.slock.it/build-images/cmake:gcc7-mingw
  extends: .conanbuild
  variables:
    CONAN_OPTS: "-DTRANSPORTS=true -DUSE_CURL=false"
    BUILD: "win_jni"

centos:
  image: docker.slock.it/build-images/cmake:centos
  extends:
    - .conanbuild
    - .only_full
  tags:
    - short-jobs
  variables:
    BUILD: "centos_build"

arm7:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  extends: .conanbuild
  tags:
    - arm
  variables:
    CONAN_OPTS: "-DZKCRYPTO_LIB=true"
    BUILD: "arm7_build"

gcc8-x86:
  image: docker.slock.it/build-images/cmake:gcc8-x86
  extends: .conanbuild
  variables:
    BUILD: "x86_build"

# Note:
# Following job builds IN3 without CURL using an older compiler
# (required for Rust cross compilation)
gcc_legacy:
  image: docker.slock.it/build-images/cmake:gcc-legacy
  extends: .conanbuild
  before_script:
    - export PATH="/opt/cmake-3.6.1-Linux-x86_64/bin/:$PATH"
  variables:
    CONAN_OPTS: "-DUSE_CURL=false"
    BUILD: "gcc_legacy"

clang50:
  image: docker.slock.it/build-images/cmake:clang50
  extends:
    - .conanbuild
    - .only_full

clang16:
  image: docker.slock.it/build-images/cmake:clang16
  extends:
    - .conanbuild
    - .only_full

mac_os:
  needs: []
  stage: build
  script:
    - mkdir mac_build
    - mkdir mac_jni
    - cd mac_build
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG  -DCMAKE_BUILD_TYPE=MINSIZEREL  -DZKCRYPTO_LIB=true -DTRANSPORTS=false -DUSE_SCRYPT=true ..
    - make
    - cp lib/libin3.dylib ../mac_jni/
    - rm -rf *
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG  -DCMAKE_BUILD_TYPE=MINSIZEREL  -DZKCRYPTO_LIB=true ..
    - make

  artifacts:
    paths:
      - mac_jni
      - mac_build/c/docs
      - mac_build/lib
      - mac_build/bin
      - mac_build/rust
  tags:
    - mac-os

docker:
  stage: bindings
  needs: []
  extends: .only_full
  tags:
    - short-jobs
  services:
    - docker:dind
  image: docker.slock.it/build-images/deployment
  script:
    - export COMMIT_IMAGE_TAG="$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME/\//_}"
    - echo $COMMIT_IMAGE_TAG
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $COMMIT_IMAGE_TAG || true
    - docker build --cache-from $COMMIT_IMAGE_TAG -t $COMMIT_IMAGE_TAG .
    - docker tag $COMMIT_IMAGE_TAG $RELEASE_IMAGE_TAG
    - docker push $RELEASE_IMAGE_TAG
    - docker push $COMMIT_IMAGE_TAG

# ##### test ######

test_c:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  needs: []
  tags:
    - short-jobs
  script:
    - mkdir testbuild
    - cd testbuild
    - cmake -DTEST=true -DTAG_VERSION=$CI_COMMIT_TAG -DEVM_GAS=true -DZKSYNC=true -DCMAKE_BUILD_TYPE=Debug -DLIBCURL_TYPE=shared ..
    - make
    - ctest -V | tee ../mac_test_c.log | test/junit > ../mac_test_c.xml
  artifacts:
    reports:
      junit: mac_test_c.xml
    paths:
      - testbuild/test
      - Testing
      - mac_test_c.xml
      - mac_test_c.log

test_rpc:
  image: docker.slock.it/build-images/cmake:clang16
  stage: test
  needs: []
  tags:
    - short-jobs
  script:
    - cd scripts/generator; npm i && cd ../..
    - find c/src -name 'rpc.yml' | xargs node scripts/generator/validate_schema.js

test_zephyr_cryptocell:
  image: docker.slock.it/build-images/cmake:nrf-connect-sdk
  needs: []
  stage: test
  script:
    - mkdir build
    - cd build
    - cmake -DCRYPTOCELL=true  -DRPC_ONLY=in3_signData -DED25519=false -DBOARD=nrf5340dk_nrf5340_cpuapp -DARM_MBEDTLS_PATH=/ncs/mbedtls/ ../c/test/qemu/zephyr-cryptocell/
    - make -j
  artifacts:
    paths:
      - build

test_qemu_cortexm3:
  image: docker.io/zephyrprojectrtos/zephyr-build:v0.23.1
  stage: test
  needs: []
  extends: .only_full
  script:
    - west init -m https://github.com/zephyrproject-rtos/zephyr --mr v3.0.0
    - export ZEPHYR_BASE=/builds/in3/c/in3-core
    - source /builds/in3/c/in3-core/zephyr/zephyr-env.sh
    - west update
    - west build -b qemu_cortex_m3 c/test/qemu/zephyr-arm3
    - ./scripts/qemu_cortexm3.sh

test_qemu_xtensaesp32:
  image: docker.slock.it/build-images/cmake:esp
  stage: test
  needs: []
  extends: .only_full
  script:
    - cp -avi scripts/qemu_xtensa.sh /opt/qemu/build/
    - cd c/test/qemu/esp32
    - idf.py build
    - ./make-flash-img.sh in3-espidf flash_image.bin
    - cp -avi flash_image.bin /opt/qemu/build
    - cd /opt/qemu/build
    - ./qemu_xtensa.sh

examples_linux:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  needs:
    - gcc8
  script:
    - mv x64_build build
    - cd c/examples
    - ./build.sh
  tags:
    - short-jobs

examples_arm:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  stage: test
  needs:
    - arm7
  script:
    - mv arm7_build build
    - cd c/examples
    - ./build.sh
  tags:
    - arm

examples_macos:
  stage: test
  allow_failure: true
  needs:
    - mac_os
  script:
    - mv mac_build build
    - cd c/examples
    - ./build.sh
    - cd ../..
    - mv build mac_build
  tags:
    - mac-os
#integration_longrun:
#  stage: integration
#  extends: .only_release
#  trigger:
#    project: qa/long-run
#    strategy: depend
#    branch: develop

#integration_browser:
#  stage: integration
#  extends: .only_release
#  trigger:
#    project: in3/ts/browser-test
#    strategy: depend
#    branch: develop
