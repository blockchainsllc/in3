# This template should be used for jobs to run during deployment only
.only_deploy:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: manual

.only_full:
  rules:
    - changes:
        - c/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

dockerhub-deploy:
  stage: deploy
  needs: []
  extends: .only_deploy
  tags:
    - short-jobs
  services:
    - docker:dind
  image: docker.slock.it/build-images/deployment
  before_script:
    - docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD} ${DOCKERHUB_REGISTRY}
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - export IMAGE_TAG="slockit/in3:$IMAGE_VERSION"
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $COMMIT_IMAGE_TAG .
    - docker tag $COMMIT_IMAGE_TAG $IMAGE_TAG
    - docker push $IMAGE_TAG
    - docker tag $IMAGE_TAG slockit/in3:latest
    - docker push slockit/in3:latest

readthedocs:
  image: docker.slock.it/build-images/doc:readthedocs
  stage: test
  needs:
    - gcc8
    - python
    - dotnet
  extends: .only_full
  tags:
    - short-jobs
  allow_failure: true
  script:
    - cd scripts
    - ./update_examples.sh
    - cd ..
    - export PRE_DOC=`cat wasm/docs/*.md`
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.slock.it/in3/c/in3-doc.git  doc
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.slock.it/tools/generator.git
    - cp python_multilib/docs/documentation.md doc/docs/api-python.md
    - cp dotnet/docs/api-dotnet.md doc/docs/
    - cd generator
    - npm i && npm run build
    - bin/slockit-doxygen ../x64_build/c/docs/doc_doxygen/xml "# API Reference C\n\n" >  ../doc/docs/api-c.md
    - bin/slockit-doxygen ../x64_build/java/docs/doc_doxygen/xml "# API Reference Java\n\n" java >  ../doc/docs/api-java.md
    - chmod 777 bin/*
    - cd ../doc/docs && make html && make text
  artifacts:
    paths:
      - doc/build
  # Caches per branch - per job
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .npm/

release_mac_and_wasm:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - mac_os
    - gcc8
    - readthedocs
    - java
    - python
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - cp -r ../mac_build/bin .
    - cp -r ../mac_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cp -r ../python_multilib/in3/libin3/shared python/in3/libin3/
    - cd ..
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_mac.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_mac.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_mac.tar.gz
    - tar -zcv --exclude=in3-mac-wasm/python --exclude=in3-mac-wasm/java --exclude=in3-mac-wasm/bin --exclude=in3-mac-wasm/lib --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_wasm.tar.gz in3-mac-wasm/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_wasm.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_wasm.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "Mac release:" $IPFS_HASH >> in3-mac-wasm/mac_release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_wasm.tar.gz
    - cd in3-mac-wasm
  artifacts:
    paths:
      - in3-mac-wasm

release_x64:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  needs:
    - gcc8
    - readthedocs
    - java
    - python
  extends: .only_deploy
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-x64
    - cd in3-x64
    - cp -r ../x64_build/bin .
    - cp -r ../x64_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cp -r ../python_multilib/in3/libin3/shared python/in3/libin3/
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_x64.tar.gz in3-x64/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_x64.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_mac.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "x64 release:" $IPFS_HASH >> in3-x64/x64_release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_x64.tar.gz
    - cd in3-x64
  artifacts:
    paths:
      - in3-x64

release_x86:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - gcc8
    - gcc8-x86
    - readthedocs
    - java
    - python
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-x86
    - cd in3-x86
    - cp -r ../x86_build/bin .
    - cp -r ../x86_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cp -r ../python_multilib/in3/libin3/shared python/in3/libin3/
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_x86.tar.gz in3-x86/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_x86.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_x86.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "x86 release:" $IPFS_HASH >> in3-x86/x86_release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_x86.tar.gz
    - cd in3-x86
  artifacts:
    paths:
      - in3-x86

release_arm7:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - gcc8
    - arm7
    - readthedocs
    - java
    - python
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-arm7
    - cd in3-arm7
    - cp -r ../arm7_build/bin .
    - cp -r ../arm7_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python  ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cp -r ../python_multilib/in3/libin3/shared python/in3/libin3/
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_arm7.tar.gz in3-arm7/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_arm7.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_arm7.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "arm7 release:" $IPFS_HASH >> in3-arm7/arm7_release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_arm7.tar.gz
    - cd in3-arm7
  artifacts:
    paths:
      - in3-arm7

release_win:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - gcc8
    - win_mingw
    - readthedocs
    - java
    - python
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-win
    - cd in3-win
    - cp -r ../win_build/bin .
    - cp -r ../win_build/lib .
    - mv bin/in3 bin/in3.exe
    - mv bin/rlp bin/rlp.exe
    - mv bin/json bin/json.exe
    - mv lib/libin3.so lib/in3.dll
    - cp -r ../c  ../java ../CMakeLists.txt ../python  ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cp -r ../python_multilib/in3/libin3/shared python/in3/libin3/
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_windows.tar.gz in3-win/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_windows.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_windows.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "windows release:" $IPFS_HASH >> in3-win/win_release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_windows.tar.gz
    - cd in3-win
  artifacts:
    paths:
      - in3-win

pages:
  stage: deploy
  tags:
    - arm
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
  needs:
    - arm7
    - readthedocs
    - coverage
    - clangcheck
    - java_linux
    - python_linux
  script:
    - mkdir -p public/lib
    - tar -zcvf libFiles_$CI_COMMIT_SHORT_SHA.tar.gz arm7_build/lib
    - cp libFiles_$CI_COMMIT_SHORT_SHA.tar.gz public/lib
    - echo Grab file at BASE_PAGES_URL/lib/libFiles_$CI_COMMIT_SHORT_SHA.tar.gz
    - cp -r cov_build/ccov/all-merged public/coverage
    - cp -r report/* public/code_analysis
    - cp -r doc/build public/rtd || true
    - cp -r java/build/reports/jacoco/test/html    public/coverage_java
    - cp -r python_multilib/htmlcov public/coverage_python
    - echo "<html><body><h1>Incubed report for last build</h1><ul><li><a href='rtd/html/index.html'>Read the docs(html)</a></li><li><a href='rtd/latex/Incubed.pdf'>Read the docs(pdf)</a></li><li><a href='code_analysis/index.html'>Code Analysis</a></li><li><a href='coverage/index.html'>Code Coverage C</a></li><li><a href='coverage_java/index.html'>Code Coverage JAVA</a></li><li><a href='coverage_python/index.html'>Code Coverage PYTHON</a></li></ul></body></html>" > public/index.html
  artifacts:
    paths:
      - public

.debian_package_deploy_template_in3:
  image: docker.slock.it/build-images/cmake:gcc8-with-debian-deps
  stage: deploy
  tags:
    - short-jobs
  needs:
    - test_c
    - java_arm
    - examples_arm
    - examples_linux
    - examples_macos
    - java_linux
    - java_macos
    - readthedocs
  script:
    - mv scripts/debian .
    - mv debian/changelog-in3 debian/changelog
    - mv debian/control-in3 debian/control
    - mv debian/rules-in3 debian/rules
    - rm -rf debian/*-dev
    - echo "" >> debian/changelog
    - echo "in3 (${VERSION:1}~${DISTRO}) ${DISTRO}; urgency=medium" >> debian/changelog
    - echo "" >> debian/changelog
    - echo "  * Check https://github.com/blockchainsllc/in3 for changelog " >> debian/changelog
    - echo "" >> debian/changelog
    - echo  " -- devops_slock.it <devops@slock.it> " $(date -R)  >> debian/changelog
    - echo "" >> debian/changelog
    - cat debian/changelog
    - mkdir ~/.gnupg && chmod 700 ~/.gnupg
    - echo -e "use-agent\npinentry-mode loopback" > ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
    - gpg --no-tty --batch --import --allow-secret-key-import "$PGP_KEY_ASC"
    - debuild -S -sa -us -uc
    - cd ..
    - debsign -p"gpg --batch --yes --no-tty --passphrase ${PGP_PASSPHRASE}" -S -kB4179604561E56D1 in3_${VERSION:1}~${DISTRO}_source.changes
    - dput ppa:devops-slock-it/in3 in3_${VERSION:1}~${DISTRO}_source.changes

debian_package_deploy_bionic:
  extends:
    - .debian_package_deploy_template_in3
    - .only_deploy
  variables:
    DISTRO: "bionic"
    VERSION: $CI_COMMIT_TAG

debian_package_deploy_focal:
  extends:
    - .debian_package_deploy_template_in3
    - .only_deploy
  variables:
    DISTRO: "focal"
    VERSION: $CI_COMMIT_TAG

.debian_package_deploy_template_in3_dev:
  image: docker.slock.it/build-images/cmake:gcc8-with-debian-deps
  stage: deploy
  tags:
    - short-jobs
  needs:
    - test_c
    - java_arm
    - examples_arm
    - examples_linux
    - examples_macos
    - java_linux
    - java_macos
    - readthedocs
  script:
    - mv scripts/debian .
    - mv debian/changelog-dev debian/changelog
    - mv debian/control-dev debian/control
    - mv debian/rules-dev debian/rules
    - rm -rf debian/*-in3
    - echo "" >> debian/changelog
    - echo "in3-dev (${VERSION:1}~${DISTRO}) ${DISTRO}; urgency=medium" >> debian/changelog
    - echo "" >> debian/changelog
    - echo "  * Check https://github.com/blockchainsllc/in3 for changelog " >> debian/changelog
    - echo "" >> debian/changelog
    - echo  " -- devops_slock.it <devops@slock.it> " $(date -R)  >> debian/changelog
    - echo "" >> debian/changelog
    - cat debian/changelog
    - mkdir ~/.gnupg && chmod 700 ~/.gnupg
    - echo -e "use-agent\npinentry-mode loopback" > ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
    - gpg --no-tty --batch --import --allow-secret-key-import "$PGP_KEY_ASC"
    - debuild -S -sa -us -uc
    - cd ..
    - debsign -p"gpg --batch --yes --no-tty --passphrase ${PGP_PASSPHRASE}" -S -kB4179604561E56D1 in3-dev_${VERSION:1}~${DISTRO}_source.changes
    - dput ppa:devops-slock-it/in3 in3-dev_${VERSION:1}~${DISTRO}_source.changes

debian_dev_package_deploy_bionic:
  extends:
    - .debian_package_deploy_template_in3_dev
    - .only_deploy
  variables:
    DISTRO: "bionic"
    VERSION: $CI_COMMIT_TAG

debian__dev_package_deploy_focal:
  extends:
    - .debian_package_deploy_template_in3_dev
    - .only_deploy
  variables:
    DISTRO: "focal"
    VERSION: $CI_COMMIT_TAG

brew_release:
  stage: release
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - mac_os
    - release_mac_and_wasm
  before_script:
    - git config --global user.name "${GITHUB_USER_NAME}"
    - git config --global user.email "${GITHUB_USER_EMAIL}"
  script:
    - git clone https://github.com/blockchainsllc/homebrew-in3.git
    - cd homebrew-in3
    - sed '4s/.*/url "https:\/\/github.com\/blockchainsllc\/in3\/releases\/download\/'"${CI_COMMIT_TAG}"'\/in3_'"${CI_COMMIT_TAG}"'_mac.tar.gz"/' in3.rb > in3.rb.tmp && mv in3.rb.tmp in3.rb
    - curl -jksSL -o /tmp/mac.tar.gz  https://github.com/blockchainsllc/in3/releases/download/${CI_COMMIT_TAG}/in3_${CI_COMMIT_TAG}_mac.tar.gz
    - export sha256_hash=$(sha256sum /tmp/mac.tar.gz | awk '{ print $1 }')
    - sed -e '5s/.*/sha256 '"\"$sha256_hash"\"'/' in3.rb > in3.rb.tmp && mv in3.rb.tmp in3.rb
    - git add in3.rb
    - git commit -m "updated version and hash"
    - git push https://${GITHUB_USER_NAME}:${GITHUB_TOKEN}@github.com/blockchainsllc/homebrew-in3.git --all

github_body_release:
  stage: release
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  extends: .only_deploy
  needs:
    - release_mac_and_wasm
    - release_x64
    - release_x86
    - release_arm7
    - release_win
  script:
    - cat in3-mac-wasm/mac_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-x64/x64_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-x86/x86_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-arm7/arm7_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-win/win_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - ghr -u blockchainsllc -r in3 -b "$(cat release_ipfs_hash.txt)" $CI_COMMIT_TAG release_ipfs_hash.txt
