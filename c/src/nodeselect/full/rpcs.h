/*******************************************************************************
 * This file is part of the Incubed project.
 * Sources: https://github.com/slockit/in3-c
 *
 * Copyright (C) 2018-2022 slock.it GmbH, Blockchains LLC
 *
 *
 * COMMERCIAL LICENSE USAGE
 *
 * Licensees holding a valid commercial license may use this file in accordance
 * with the commercial license agreement provided with the Software or, alternatively,
 * in accordance with the terms contained in a written agreement between you and
 * slock.it GmbH/Blockchains LLC. For licensing terms and conditions or further
 * information please contact slock.it at in3@slock.it.
 *
 * Alternatively, this file may be used under the AGPL license as follows:
 *
 * AGPL LICENSE USAGE
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 * [Permissions of this strong copyleft license are conditioned on making available
 * complete source code of licensed works and modifications, which include larger
 * works using a licensed work, under the same license. Copyright and license notices
 * must be preserved. Contributors provide an express grant of patent rights.]
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *******************************************************************************/

// ::: This is a autogenerated file. Do not edit it manually! :::

#include "../../core/client/request_internal.h"

// list of availbale rpc-functions
#ifndef __RPC_NODELIST_H
#define __RPC_NODELIST_H

/**
 * fetches and verifies the nodeList from a node
 *
 *
 * Parameters:
 *
 *   - bytes_t    limit     : (int) if the number is defined and >0 this method will return a partial nodeList limited to the given number.
 *   - bytes_t    seed      : (bytes32) this 32byte hex integer is used to calculate the indexes of the partial nodeList. It is expected to be a random value choosen by the client in order to make the result deterministic.
 *   - d_token_t* addresses : (address) a optional array of addresses of signers the nodeList must include.
 * Returns:
 *   - d_token_t* : ([object Object]) the current nodelist
 */
static inline in3_ret_t rpc_call_in3_nodeList(in3_rpc_handle_ctx_t* ctx, d_token_t** res, bytes_t limit, bytes_t seed, d_token_t* addresses) {
  char*     jpayload = sprintx("\"%B\",\"%B\",%j", (bytes_t) limit, (bytes_t) seed, (d_token_t*) addresses);
  in3_ret_t r        = req_send_sub_request(ctx->req, "in3_nodeList", jpayload, NULL, res, NULL);
  _free(jpayload);
  return r;
}
#define FN_IN3_NODELIST "in3_nodeList"

/**
 * requests a signed blockhash from the node.
 * In most cases these requests will come from other nodes, because the client simply adds the addresses of the requested signers
 * and the processising nodes will then aquire the signatures with this method from the other nodes.
 *
 * Since each node has a risk of signing a wrong blockhash and getting convicted and losing its deposit,
 * per default nodes will and should not sign blockHash of the last `minBlockHeight` (default: 6) blocks!
 *
 *
 *
 * Parameters:
 *
 *   - d_token_t* blocks : ([object Object]) array of requested blocks.
 * Returns:
 *   - d_token_t* : ([object Object]) the Array with signatures of all the requires blocks.
 */
static inline in3_ret_t rpc_call_in3_sign(in3_rpc_handle_ctx_t* ctx, d_token_t** res, d_token_t* blocks) {
  char*     jpayload = sprintx("%j", (d_token_t*) blocks);
  in3_ret_t r        = req_send_sub_request(ctx->req, "in3_sign", jpayload, NULL, res, NULL);
  _free(jpayload);
  return r;
}
#define FN_IN3_SIGN "in3_sign"

/**
 * Returns whitelisted in3-nodes addresses. The whitelist addressed are accquired from whitelist contract that user can specify in request params.
 *
 *
 * Parameters:
 *
 *   - uint8_t* address : (address) address of whitelist contract
 * Returns:
 *   - d_token_t* : ([object Object]) the whitelisted addresses
 */
static inline in3_ret_t rpc_call_in3_whitelist(in3_rpc_handle_ctx_t* ctx, d_token_t** res, uint8_t* address) {
  char*     jpayload = sprintx("\"%B\"", bytes(address, 20));
  in3_ret_t r        = req_send_sub_request(ctx->req, "in3_whitelist", jpayload, NULL, res, NULL);
  _free(jpayload);
  return r;
}
#define FN_IN3_WHITELIST "in3_whitelist"

#endif