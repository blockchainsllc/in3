/*******************************************************************************
 * This file is part of the Incubed project.
 * Sources: https://github.com/slockit/in3-c
 *
 * Copyright (C) 2018-2022 slock.it GmbH, Blockchains LLC
 *
 *
 * COMMERCIAL LICENSE USAGE
 *
 * Licensees holding a valid commercial license may use this file in accordance
 * with the commercial license agreement provided with the Software or, alternatively,
 * in accordance with the terms contained in a written agreement between you and
 * slock.it GmbH/Blockchains LLC. For licensing terms and conditions or further
 * information please contact slock.it at in3@slock.it.
 *
 * Alternatively, this file may be used under the AGPL license as follows:
 *
 * AGPL LICENSE USAGE
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 * [Permissions of this strong copyleft license are conditioned on making available
 * complete source code of licensed works and modifications, which include larger
 * works using a licensed work, under the same license. Copyright and license notices
 * must be preserved. Contributors provide an express grant of patent rights.]
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *******************************************************************************/

// ::: This is a autogenerated file. Do not edit it manually! :::
// clang-format off

#include "../../core/client/request_internal.h"

// list of availbale rpc-functions
#ifndef __RPC_IPFS_H
#define __RPC_IPFS_H

/**
 * Fetches the data for a requested ipfs-hash. If the node is not able to resolve the hash or find the data a error should be reported.
 *
 *
 * Parameters:
 *
 *   - char* ipfshash : (string) the ipfs multi hash
 *   - char* encoding : (string) the encoding used for the response. ( `hex` , `base64` or `utf8`)
 * Returns:
 *   - bytes_t : (bytes) the content matching the requested hash encoded in the defined encoding.
 */
static inline in3_ret_t rpc_call_ipfs_get(in3_rpc_handle_ctx_t* ctx, bytes_t* _res, char* ipfshash, char* encoding) {
  d_token_t* res      = NULL;
  char*      jpayload = sprintx("\"%S\",\"%S\"", (char*) ipfshash, (char*) encoding);
  in3_ret_t  _r       = req_send_sub_request(ctx->req, "ipfs_get", jpayload, NULL, &res, NULL);
  _free(jpayload);
  if (!_r) *_res = d_bytes(res);
  return _r;
}
#define FN_IPFS_GET "ipfs_get"

/**
 * Stores ipfs-content to the ipfs network.
 * Important! As a client there is no garuantee that a node made this content available. ( just like `eth_sendRawTransaction` will only broadcast it).
 * Even if the node stores the content there is no gurantee it will do it forever.
 *
 *
 *
 * Parameters:
 *
 *   - bytes_t data     : (bytes) the content encoded with the specified encoding.
 *   - char*   encoding : (string) the encoding used for the request. ( `hex` , `base64` or `utf8`)
 * Returns:
 *   - char* : (string) the ipfs multi hash
 */
static inline in3_ret_t rpc_call_ipfs_put(in3_rpc_handle_ctx_t* ctx, char** _res, bytes_t data, char* encoding) {
  d_token_t* res      = NULL;
  char*      jpayload = sprintx("\"%B\",\"%S\"", (bytes_t) data, (char*) encoding);
  in3_ret_t  _r       = req_send_sub_request(ctx->req, "ipfs_put", jpayload, NULL, &res, NULL);
  _free(jpayload);
  if (!_r) *_res = d_string(res);
  return _r;
}
#define FN_IPFS_PUT "ipfs_put"

#endif