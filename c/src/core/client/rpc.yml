# yaml-language-server: $schema=../../../../scripts/generator/rpc_schema.json
config:
  api:
    descr: |
      There are also some Incubed specific rpc-methods, which will help the clients to bootstrap and update the nodeLists.


      The incubed client itself offers special RPC-Methods, which are mostly handled directly inside the client:

    # config
    config:
      chainId:
        type: string | uint
        descr: the chainId or the name of a known chain. It defines the nodelist to connect to.
        example: goerli
        optional: true
        default: mainnet
        enum:
          mainnet: Mainnet Chain
          goerli: Goerli Testnet
          ewc: Energy WebFoundation
          btc: Bitcoin
          ipfs: ipfs
          local: local-chain
        cmd: c

      finality:
        type: int
        descr: In case of a Proof of Authority chain finality indicates the amount of blocks needed to reach finality, which is important for in3 verifications. For Bitcoin chains this indicates the amount of blockheader that are requested from the in3 node.
        example: 50
        optional: true
        default: 0
        cmd: f

      includeCode:
        type: bool
        descr: |
          *legecy option*
          if true, the request should include the codes of all accounts. otherwise only the the codeHash is returned. In this case the client may ask by calling eth_getCode() afterwards.
        example: true
        optional: true
        default: false

      debug:
        type: bool
        descr: if true, debug messages will be written to stderr.
        example: true
        optional: true
        default: false

      maxAttempts:
        type: int
        descr: max number of attempts in case a response is rejected. The default only makes sense if in3 is used. For other rpc based ethereum endpoints it should be set to 1.
        example: 1
        optional: true
        default: 7
        cmd: a

      useTxType2:
        type: bool
        descr: if true send Transaction will create TxType 2 Transactions unless explicitly specifed.
        example: true
        optional: true
        default: false

      gasPrio:
        type: int
        descr: the factor in percent to be used when calculating the gasPrice (50 = half of average gasPrice, 200 = double of the current gasPrice).
        example: 120
        optional: true
        default: 100
        cmd: g

      keepIn3:
        type: bool
        descr: if true, requests sent to the input sream of the comandline util will be send the responses in the same form as the server did. This means it will keep the proofs within the in3 object. Usefull mostly for debugging.
        example: true
        optional: true
        default: false
        cmd: kin3

      stats:
        type: bool
        descr: In3 Server keeping stats about requests. If false, the server will not keep stats from this instances requests. You want that for example for automated tests etc. If true, requests sent will be used for stats.
        example: false
        optional: true
        default: true

      useBinary:
        type: bool
        descr: if true the client will use binary format. This will reduce the payload of the responses by about 60% but should only be used for embedded systems or when using the API, since this format does not include the propertynames anymore.
        example: true
        optional: true
        default: false

      experimental:
        type: bool
        descr: if true the client allows to use use experimental features, otherwise a exception is thrown if those would be used.
        example: true
        optional: true
        default: false
        cmd: x

      timeout:
        descr: specifies the number of milliseconds before the request times out. increasing may be helpful if the device uses a slow connection.
        type: uint64
        optional: true
        example: 100000
        default: 20000

      proof:
        descr: if true the nodes should send a proof of the response. If set to none, verification is turned off completly.
        type: string
        optional: true
        enum:
          none: no proof will be generated or verfiied. This also works with standard rpc-endpoints.
          standard: Stanbdard Proof means all important properties are verfiied
          full: In addition to standard, also some rarly needed properties are verfied, like uncles. But this causes a bigger payload.
        example: none
        default: standard
        cmd: p

      replaceLatestBlock:
        descr: Defines the number of blocks that will be substracted from latest.
        type: int
        optional: true
        example: 6
        cmd: l

  # rpc-commands

  in3_config:
    skipApi: true
    descr: changes the configuration of a client. The configuration is passed as the first param and may contain only the values to change.
    params:
      config:
        descr: a Object with config-params.

    result:
      descr: an boolean confirming that the config has changed.
    example:
      request:
        - chainId: "0x5"
          maxAttempts: 4
          nodeLimit: 10
          nodes:
            nodeList:
              - address: "0x1234567890123456789012345678901234567890"
                url: "https://mybootnode-A.com"
                props: "0xFFFF"
              - address: "0x1234567890123456789012345678901234567890"
                url: "https://mybootnode-B.com"
                props: "0xFFFF"
      response: true
