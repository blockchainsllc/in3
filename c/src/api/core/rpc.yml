# yaml-language-server: $schema=../../../../scripts/generator/rpc_schema.json
utils:
  in3_cacheClear:
    sync: true
    descr: clears the incubed cache (usually found in the .in3-folder)
    result:
      type: bool
      descr: true indicating the success
    example:
      request: []
      response: true

  web3_clientVersion:
    descr: Returns the underlying client version. See [web3_clientversion](https://eth.wiki/json-rpc/API#web3_clientversion) for spec.
    result:
      type: string
      descr: when connected to the incubed-network, `Incubed/<Version>` will be returned, but in case of a direct enpoint, its's version will be used.

  keccak:
    sync: true
    alias: web3_sha3

  web3_sha3:
    sync: true
    descr: |
      Returns Keccak-256 (not the standardized SHA3-256) of the given data.

      See [web3_sha3](https://eth.wiki/json-rpc/API#web3_sha3) for spec.

      No proof needed, since the client will execute this locally.
    params:
      data:
        descr: data to hash
        type: bytes
    result:
      descr: the 32byte hash of the data
      type: bytes
    example:
      request:
        - "0x1234567890"
      response: "0x3a56b02b60d4990074262f496ac34733f870e1b7815719b46ce155beac5e1a41"

  in3_base58_encode:
    sync: true
    descr: |
      Returns base58 encoded data
    params:
      data:
        descr: data to encode
        type: bytes
    result:
      type: string
      descr: the encoded data
    example:
      request:
        - "3K3F4C"
      response: "SYUwqHgn"

  in3_base58_decode:
    sync: true
    descr: |
      Returns base58 decoded data
    params:
      data:
        descr: data to decode
        type: string
    result:
      type: bytes
      descr: the decoded bytes
    example:
      request:
        - "3K3F4C"
      response: "0x5a694361"

  in3_base64_encode:
    sync: true
    descr: |
      Returns base64 encoded data
    params:
      data:
        descr: data to encode
        type: bytes
    result:
      descr: the encoded data
      type: string
    example:
      request:
        - "abcdef"
      response: "YWJjZGVm"

  in3_base64_decode:
    sync: true
    descr: |
      Returns base64 decoded data
    params:
      data:
        descr: data to decode
        type: string
    result:
      type: bytes
      descr: the decoded bytes
    example:
      request:
        - "YWJjZGVm"
      response: "0x616263646566"

  sha256:
    sync: true
    descr: |
      Returns sha-256 of the given data.

      No proof needed, since the client will execute this locally.
    params:
      data:
        descr: data to hash
        type: bytes
    result:
      type: bytes
      descr: the 32byte hash of the data
    example:
      request:
        - "0x1234567890"
      response: "0x6c450e037e79b76f231a71a22ff40403f7d9b74b15e014e52fe1156d3666c3e6"

  in3_http:
    apiName: fetchHttp
    descr: sends a simple http-request. This is used internally to fetch data from REST-APIs.
    params:
      method:
        type: string
        descr: the HTTP-method to use like 'GET', 'POST', 'PUT', 'DELETE',...
      url:
        type: string
        descr: the url of the endpoint
      payload:
        type: string
        descr: the payload or null, if it does not apply
        nullable: true
        optional: true
      headers:
        type: string
        array: true
        optional: true
        descr: "a array of additional headers to send. each header must be a string in the form `Key: Value`"
    result:
      type: any
      descr: the response will depend on the http-response. If the data are json-data, the json-object will the response.
    example:
      request:
        - POST
        - https://reqbin.com/echo/post/json
        - { "id": 78912, "Customer": "Jason Sweet", "Price": 18 }
        - ["Accept: application/json", "Content-Type: application/json"]
      response:
        success: true

signers:
  in3_createKey:
    sync: true
    descr: |
      Generates 32 random bytes.
      If /dev/urandom is available it will be used and should generate a secure random number.
      If not the number should not be considered sceure or used in production.
    params:
      seed:
        optional: true
        descr: the seed. If given the result will be deterministic.
        type: bytes
    result:
      descr: the 32byte random data
      type: bytes32
    example:
      request: []
      response: "0x6c450e037e79b76f231a71a22ff40403f7d9b74b15e014e52fe1156d3666c3e6"

  in3_bip32:
    sync: true
    descr: |
      Generates 32 byte private key based on BIP 32.
    params:
      seed:
        descr: the seed. it mus be at least 16 bytes long
        type: bytes
      curve:
        descr: the name of the curve. should be one of `secp256k1`,`secp256k1-decred`,`secp256k1-groestl`,`secp256k1-smart`,`nist256p1`,`ed25519`,`ed25519 cardano seed`,`ed25519-sha3`,`curve25519`,`ed25519-keccak`
        default: secp256k1
        optional: true
        type: string
      path:
        descr: the derivation path as specified in BIP32
        example: m/2/3
        type: string
        optional: true
    result:
      descr: theprivate key
      type: bytes32
    example:
      request:
        - "0x1234567890123456789012345678901234567890"
        - secp256k1
        - m/4
      response: "0xd747eb5734828a3c3fc617cb98c47964bd1df96ec05ce2a2c6618782d2c43645"

  in3_bip39_create:
    sync: true
    descr: |
      generates a mnemonic based on bip39 ( https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki )
    params:
      seed:
        descr: the seed. if a seed is passed, this seed will be used to generate it, making it deterministic.
        optional: true
        type: bytes
      words:
        descr: the number of words. it must one of 12, 15, 18, 21 or 24 (default). This number will also have an effect on the entropy or security.
        optional: true
        type: uint32
    result:
      descr: a list of words based on bip39
      type: string
    example:
      request:
        - "0x1ff06206d4d2e44b104644b619d070821a781c05ccca2579728bab0be6010e52"
      response: "cable loan like predict comic cereal donate silk render soldier bring aerobic pole asthma blame off century slide pepper figure salmon above deer found"

  in3_bip39_decode:
    sync: true
    descr: |
      decodes a mnemonic and returns the seed as 64 bytes.
    params:
      mnemonic:
        descr: the mnemonic
        type: string
      passphrase:
        descr: the passphrase
        type: string
    result:
      descr: the resulting seed
      type: bytes
    example:
      request:
        - "cable loan like predict comic cereal donate silk render soldier bring aerobic pole asthma blame off century slide pepper figure salmon above deer found"
        - test
      response: "0x751ff30f38a674397010348a36c4ba0dac0f943bfaca936ea725a6ac2e16f68798e0ef8fa11992882b2c2f968c44e6afbc8aced61b96403834998e7b7faeeb5e"

  in3_ed25519_pk2pub:
    sync: true
    descr: Generates the public key from a private key for ed25519.
    params:
      pk:
        descr: the private key
        type: bytes32
    result:
      descr: the 32byte public key
      type: bytes32
    example:
      request:
        - "0x4c5b4b2225e51d284ff82947c186a03d89440e591020ff213c18135757df156a"
      response: "0xe6e7d351014618d9cac351241979864f274a543f54793a32d7d3b9a55efb0f52"

  in3_ed25519_sign:
    sync: true
    descr: signs the message with for ed25519.
    params:
      message:
        descr: the message to sign
        type: bytes
      pk:
        descr: the private key
        type: bytes32
    result:
      descr: the 64byte signature
      type: bytes
    example:
      request:
        - "0x1234567890"
        - "0x4c5b4b2225e51d284ff82947c186a03d89440e591020ff213c18135757df156a"
      response: "0x6764ba5cce521c887c7ea15df94962351a88b4b6c40e129b4085db6dfa7da5d3de40fb967f8928f9753cf6f468fe42eec8118742c4eed19d923feaf05030ee07"

  in3_ed25519_verify:
    sync: true
    descr: verifies the signature based on ed25519.
    params:
      message:
        descr: the message which was signed
        type: bytes
      signature:
        descr: the 64 byte signature
        type: bytes
      pubkey:
        descr: the 32 byte public key, whic is expected
        type: bytes32
    result:
      descr: true, if could be successfully verified.
      type: bool
    example:
      request:
        - "0x1234567890"
        - "0x6764ba5cce521c887c7ea15df94962351a88b4b6c40e129b4085db6dfa7da5d3de40fb967f8928f9753cf6f468fe42eec8118742c4eed19d923feaf05030ee07"
        - "0xe6e7d351014618d9cac351241979864f274a543f54793a32d7d3b9a55efb0f52"
      response: true

  in3_crypto_convert:
    sync: true
    descr: |
      converts cyrptographic data based on the curve and type into a different form.
    params:
      data:
        descr: the data to convert. The length and kind of data depends on the conversion type.
        type: bytes
      type:
        type: string
        descr: |
          the conversion type.
          This Type may be prefixed with curvetype to be used (`ecdsa_` or `eddsa_`) , like `eddsa_pub32`.

          The following types are supported:
          - pub64 : converts a private key (32 bytes) to a public key (64 bytes)
          - pub32 : converts a private key (32 bytes) to a public key (32 bytes)
          - sig_der : converts a signature (65 bytes) to a DER-encoded signature
          - pub_der : converts a public key (32 or 64 bytes) to a DER-encoded pubkey
    result:
      descr: the converted bytes.
      type: bytes
    example:
      request:
        - "0xb838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6ff0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9"
        - "pub_der"
      response: "0x3056301006072a8648ce3d020106052b8104000a03420004b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6ff0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9"
