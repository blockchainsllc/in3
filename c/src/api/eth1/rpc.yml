# yaml-language-server: $schema=../../../../scripts/generator/rpc_schema.json
types:
  eth_accesslist:
    address:
      type: address
      descr: the address of the contract
    storageKeys:
      array: true
      type: bytes32
      descr: list of storageKeys

  eth_internal_tx:
    op:
      descr: type of transaction or opcode used to send it (CALL, DELEGATECALL, STATICCALL, CALLCODE, ..)
      type: string
    to:
      descr: target address
      type: address
    from:
      descr: address of the sender contract
      type: address
    value:
      descr: value in wei sent
      type: uint256
    gas:
      descr: gas provided for execution
      type: uint64
    depth:
      descr: depth of the internal tx
      type: uint32

  eth_tx_decoded:
    hash:
      descr: the hash of the raw transaction. In case of a signed tx, this is the the tx-hash
      type: bytes32
    type:
      descr: the eth-transaction-type (0=legacy, 1 or 2 EIP1559)
      type: uint32
    to:
      descr: receipient of the transaction or a 0x for a deployment tx.
      type: address
    from:
      descr: address of the sender (only available if the tx is signed)
      type: address
      optional: true
    value:
      descr: value in wei to send
      type: uint256
    gas:
      descr: the gas to be send along
      type: uint64
    gasPrice:
      descr: the price in wei for one gas-unit. only available for tx type 1 and 2.
      type: uint64
      optional: true
    maxFeePerGas:
      descr: the max fees per gas ( See EIP- 1559 )
      type: uint64
      optional: true
    maxPriorityFeePerGas:
      descr: the max Prioritiyfees per gas ( See EIP- 1559 )
      type: uint64
      optional: true
    accessList:
      descr: the access list of storage values
      type: eth_accesslist
      array: true
      optional: true
    nonce:
      descr: the used nonce of the sender.
      type: uint64
    data:
      descr: the data-section of the transaction
      type: bytes
    signature:
      descr: the 65 bytes signature
      type: bytes
      optional: true
    chainId:
      descr: the chainId as encoded in the transaction. (only missing in legacy tx if EIP-155 is not used)
      type: uint64
      optional: true
    v:
      descr: the recovery-byte. For legacy-tx ( this will be either + 27 or chain_id*2 + 35 - See EIP 155)
      type: bytes
      optional: true
    r:
      descr: r-value of the sifgnature ( the R.y value)
      type: bytes32
      optional: true
    s:
      descr: s-value of the sifgnature
      type: bytes32
      optional: true
    publicKey:
      descr: the public Key of the sender as 64 bytes
      type: bytes
      optional: true
    unsigned:
      descr: the raw unsigned transaction to extract the hash for the signature
      type: bytes
      optional: true

utils:
  api:
    descr: |
      a Collection of utility-function.

  in3_abiEncode:
    sync: true
    descr: based on the [ABI-encoding](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html) used by solidity, this function encodes the value given and returns it as hexstring.
    params:
      signature:
        type: string
        descr: the signature of the function. e.g. `getBalance(uint256)`. The format is the same as used by solidity to create the functionhash. optional you can also add the return type, which in this case is ignored.
      parameters:
        type: any
        array: true
        descr: a array of arguments. the number of arguments must match the arguments in the signature.
    result:
      type: string
      descr: the ABI-encoded data as hex including the 4 byte function-signature. These data can be used for `eth_call` or to send a transaction.
    example:
      request:
        - "getBalance(address)"
        - ["0x1234567890123456789012345678901234567890"]
      response: "0xf8b2cb4f0000000000000000000000001234567890123456789012345678901234567890"

  in3_abiDecode:
    sync: true
    descr: based on the [ABI-encoding](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html) used by solidity, this function decodes the bytes given and returns it as array of values.
    params:
      signature:
        type: string
        descr: the signature of the function. e.g. `uint256`, `(address,string,uint256)` or `getBalance(address):uint256`. If the complete functionhash is given, only the return-part will be used.
      data:
        type: bytes
        descr: the data to decode (usually the result of a eth_call)
      topics:
        optional: true
        type: bytes
        descr: in case of an even the topics (concatinated to max 4x32bytes). This is used if indexed.arguments are used.
    result:
      type: any
      array: true
      descr: a array with the values after decodeing.
    example:
      request:
        - (address,uint256)
        - "0x00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000005"
      response:
        - "0x1234567890123456789012345678901234567890"
        - "0x05"

  in3_rlpDecode:
    sync: true
    descr: rlp decode the data
    params:
      data:
        type: bytes
        descr: input data
    result:
      type: any
      array: true
      descr: a array with the values after decodeing. The result is either a hex-string or an array.
    example:
      request:
        - "0xf83b808508e1409836829c40a86161616135663833353262373034623139653362616338373262343866326537663639356662653681ff82bbbb018080"
      response:
        - "0x"
        - "0x08e1409836"
        - "0x9c40"
        - "0x61616161356638333532623730346231396533626163383732623438663265376636393566626536"
        - "0xff"
        - "0xbbbb"
        - "0x01"
        - "0x"
        - "0x"

  in3_decodeTx:
    sync: true
    descr: decodes a raw transaction and returns the values. The transaction may be a signed or unsigned tx. In case of a signed transaction, the from-address will be calculated along with many other helpful values.
    params:
      data:
        type: bytes
        descr: input data
    result:
      type: eth_tx_decoded
      descr: the decoded transaction.
    example:
      request:
        - "0x02f8b0013f8459682f008518c2cdf18982bcbb940...edbc296ce"
      response:
        type: 2
        hash: "0x0a7f5daa71ad3e0115cae737559d14cdf914510a6a19c16267b8d5142d82de42"
        chainId: "0x1"
        nonce: "0x3f"
        maxPriorityFeePerGas: "0x59682f00"
        maxFeePerGas: "0x18c2cdf189"
        gas: "0xbcbb"
        to: "0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e"
        value: "0x0"
        data: "0x1896f70a978895d45a43dc4d455ecd98702a630d6acce4393cec9bdd412ffebe687ddf820000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41"
        accessList: []
        v: 0x
        r: "0x22b7c68abd0d362b0682fb5047e82d4b47acd4f5dc1f1b3556af0a8b06587798"
        s: "0x37b4f0d22ec65fad0920d9b24ef1b6b0c088afa20ace41f79188bd1edbc296ce"
        unsigned: "0x02f86d013f8459682f008518c2cdf18982bcbb9400000000000c2e074ec69a0dfb2997ba6c7d2e1e80b8441896f70a978895d45a43dc4d455ecd98702a630d6acce4393cec9bdd412ffebe687ddf820000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41c0"
        signature: "0x22b7c68abd0d362b0682fb5047e82d4b47acd4f5dc1f1b3556af0a8b0658779837b4f0d22ec65fad0920d9b24ef1b6b0c088afa20ace41f79188bd1edbc296ce00"
        publicKey: "0x63cfcd2900a37247214361d0ca3637980af8e4b64acdf2f1e1b11573b502b576df4387cbf6f94c6cdc750e3aaa23026c5b0cef0f3bb2f5bb42c093ec394fd1bb"
        from: "0xd034648eaea1d29f4e9cfa8312feff9783f31fd4"

  in3_checksumAddress:
    sync: true
    descr: Will convert an upper or lowercase Ethereum address to a checksum address.  (See [EIP55](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md) )
    params:
      address:
        descr: the address to convert.
        type: address
      useChainId:
        descr: if true, the chainId is integrated as well (See [EIP1191](https://github.com/ethereum/EIPs/issues/1121) )
        type: bool
        optional: true
    result:
      type: bytes
      descr: the address-string using the upper/lowercase hex characters.
    example:
      request:
        - "0x1fe2e9bf29aa1938859af64c413361227d04059a"
        - false
      response: "0x1Fe2E9bf29aa1938859Af64C413361227d04059a"

  in3_toWei:
    sync: true
    descr: converts the given value into wei.
    params:
      value:
        descr: the value, which may be floating number as string
        type: string
        example: "0.9"
      unit:
        descr: the unit of the value, which must be one of `wei`, `kwei`,  `Kwei`,  `babbage`,  `femtoether`,  `mwei`,  `Mwei`,  `lovelace`,  `picoether`,  `gwei`,  `Gwei`,  `shannon`,  `nanoether`,  `nano`,  `szabo`,  `microether`,  `micro`,  `finney`,  `milliether`,  `milli`,  `ether`,  `eth`,  `kether`,  `grand`,  `mether`,  `gether` or  `tether`
        type: string
        optional: true
        default: eth
    result:
      descr: the value in wei as hex.
      type: uint256
    example:
      request:
        - "20.0009123"
        - eth
      response: "0x01159183c4793db800"

  in3_fromWei:
    sync: true
    descr: converts a given uint (also as hex) with a wei-value into a specified unit.
    params:
      value:
        descr: the value in wei
        type: uint256
        example: "0x234324abdef"
      unit:
        descr: the unit of the target value, which must be one of `wei`, `kwei`,  `Kwei`,  `babbage`,  `femtoether`,  `mwei`,  `Mwei`,  `lovelace`,  `picoether`,  `gwei`,  `Gwei`,  `shannon`,  `nanoether`,  `nano`,  `szabo`,  `microether`,  `micro`,  `finney`,  `milliether`,  `milli`,  `ether`,  `eth`,  `kether`,  `grand`,  `mether`,  `gether` or  `tether`
        type: string
      digits:
        descr: fix number of digits after the comma. If left out, only as many as needed will be included.
        type: int
        optional: true
    result:
      descr: the value as string.
      type: double
    example:
      request:
        - "0x234324abadefdef"
        - eth
        - 3
      response: 0.158

  in3_calcDeployAddress:
    descr: calculates the address of a contract about to deploy. The address depends on the senders nonce.
    params:
      sender:
        descr: the sender of the transaction
        type: address
      nonce:
        descr: the nonce of the sender during deployment
        type: uint64
        optional: true
    result:
      type: address
      descr: the address of the deployed contract
    example:
      request:
        - "0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c"
        - 6054986
      response: "0xba866e7bd2573be3eaf5077b557751bb6d58076e"

  net_version:
    descr: Returns the current network id.
    apiName: getNetworkId
    result:
      descr: the network id
      type: uint64

signers:
  api:
    descr: |
      Account Handling includes handling signers and preparing and signing transacrtion and data.

      Signers are Plugins able to create signatures. Those functions will use the registered plugins.

  in3_pk2address:
    sync: true
    descr: extracts the address from a private key.
    params:
      pk:
        descr: the 32 bytes private key as hex.
        type: bytes32
    result:
      descr: the address
      type: bytes
    example:
      request:
        - "0x0fd65f7da55d811634495754f27ab318a3309e8b4b8a978a50c20a661117435a"
      response: "0xdc5c4280d8a286f0f9c8f7f55a5a0c67125efcfd"

  in3_pk2public:
    sync: true
    descr: extracts the public key from a private key.
    params:
      pk:
        descr: the 32 bytes private key as hex.
        type: bytes32
    result:
      descr: the public key as 64 bytes
      type: bytes
    example:
      request:
        - "0x0fd65f7da55d811634495754f27ab318a3309e8b4b8a978a50c20a661117435a"
      response: "0x0903329708d9380aca47b02f3955800179e18bffbb29be3a644593c5f87e4c7fa960983f78186577eccc909cec71cb5763acd92ef4c74e5fa3c43f3a172c6de1"

  in3_ecrecover:
    sync: true
    descr: extracts the public key and address from signature.
    params:
      msg:
        descr: the message the signature is based on.
        type: string
      sig:
        descr: the 65 bytes signature as hex.
        type: bytes
      sigtype:
        descr: "the type of the signature data : `eth_sign` (use the prefix and hash it), `raw` (hash the raw data), `hash` (use the already hashed data). Default: `raw`"
        type: string
        default: raw
        optional: true
    result:
      descr: the extracted public key and address
      typeName: ECRecoverResult
      type:
        publicKey:
          descr: the public Key of the signer (64 bytes)
          type: bytes
        address:
          descr: the address
          type: address
    example:
      request:
        - "0x487b2cbb7997e45b4e9771d14c336b47c87dc2424b11590e32b3a8b9ab327999"
        - "0x0f804ff891e97e8a1c35a2ebafc5e7f129a630a70787fb86ad5aec0758d98c7b454dee5564310d497ddfe814839c8babd3a727692be40330b5b41e7693a445b71c"
        - hash
      response:
        publicKey: "0x94b26bafa6406d7b636fbb4de4edd62a2654eeecda9505e9a478a66c4f42e504c4481bad171e5ba6f15a5f11c26acfc620f802c6768b603dbcbe5151355bbffb"
        address: "0xf68a4703314e9a9cf65be688bd6d9b3b34594ab4"

  in3_prepareTx:
    descr: prepares a Transaction by filling the unspecified values and returens the unsigned raw Transaction.
    params:
      tx:
        descr: the tx-object, which is the same as specified in [eth_sendTransaction](https://eth.wiki/json-rpc/API#eth_sendTransaction).
        type: eth_transaction

    result:
      type: bytes
      descr: the unsigned raw transaction as hex.
    example:
      request:
        - to: "0x63f666a23cbd135a91187499b5cc51d589c302a0"
          value: "0x100000000"
          from: "0xc2b2f4ad0d234b8c135c39eea8409b448e5e496f"
      response: "0xe980851a13b865b38252089463f666a23cbd135a91187499b5cc51d589c302a085010000000080018080"

  in3_signTx:
    descr: signs the given raw Tx (as prepared by in3_prepareTx ). The resulting data can be used in `eth_sendRawTransaction` to publish and broadcast the transaction.
    params:
      tx:
        descr: the raw unsigned transactiondata
        type: string
      from:
        descr: the account to sign
        type: address
    result:
      type: bytes
      descr: the raw transaction with signature.
    example:
      request:
        - "0xe980851a13b865b38252089463f666a23cbd135a91187499b5cc51d589c302a085010000000080018080"
        - "0xc2b2f4ad0d234b8c135c39eea8409b448e5e496f"
      response: "0xf86980851a13b865b38252089463f666a23cbd135a91187499b5cc51d589c302a08501000000008026a03c5b094078383f3da3f65773ab1314e89ee76bc41f827f2ef211b2d3449e4435a077755f8d9b32966e1ad8f6c0e8c9376a4387ed237bdbf2db6e6b94016407e276"

  in3_signData:
    descr: signs the given data.
    params:
      msg:
        descr: the message to sign.
        type: string
      account:
        descr: the account to sign if the account is a bytes32 it will be used as private key
        type: bytes
      msgType:
        descr: "the type of the signature data : `eth_sign` (use the prefix and hash it), `raw` (hash the raw data), `hash` (use the already hashed data)"
        type: string
        default: raw
        optional: true

    result:
      descr: the signature
      typeName: SignResult
      type:
        message:
          descr: original message used
          type: bytes
        messageHash:
          descr: the hash the signature is based on
          type: bytes32
        signature:
          descr: the signature (65 bytes)
          type: bytes
        r:
          descr: the x-value of the EC-Point
          type: bytes32
        s:
          descr: the y-value of the EC-Point
          type: bytes32
        v:
          descr: the recovery value (0|1) + 27
          type: uint32

    example:
      request:
        - "0x0102030405060708090a0b0c0d0e0f"
        - "0xa8b8759ec8b59d7c13ef3630e8530f47ddb47eba12f00f9024d3d48247b62852"
        - raw
      response:
        message: "0x0102030405060708090a0b0c0d0e0f"
        messageHash: "0x1d4f6fccf1e27711667605e29b6f15adfda262e5aedfc5db904feea2baa75e67"
        signature: "0xa5dea9537d27e4e20b6dfc89fa4b3bc4babe9a2375d64fb32a2eab04559e95792264ad1fb83be70c145aec69045da7986b95ee957fb9c5b6d315daa5c0c3e1521b"
        r: "0xa5dea9537d27e4e20b6dfc89fa4b3bc4babe9a2375d64fb32a2eab04559e9579"
        s: "0x2264ad1fb83be70c145aec69045da7986b95ee957fb9c5b6d315daa5c0c3e152"
        v: 27

  in3_decryptKey:
    sync: true
    descr: decrypts a JSON Keystore file as defined in the [Web3 Secret Storage Definition](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition). The result is the raw private key.
    params:
      key:
        type: keyparams
        descr: the keyparams

      #  descr: Keydata as object as defined in the keystorefile
      #  type: string
      passphrase:
        descr: the password to decrypt it.
        type: string
    result:
      descr: a raw private key (32 bytes)
      type: bytes32
    example:
      request:
        - version: 3,
          id: "f6b5c0b1-ba7a-4b67-9086-a01ea54ec638"
          address: "08aa30739030f362a8dd597fd3fcde283e36f4a1"
          crypto:
            ciphertext: "d5c5aafdee81d25bb5ac4048c8c6954dd50c595ee918f120f5a2066951ef992d"
            cipherparams:
              iv: "415440d2b1d6811d5c8a3f4c92c73f49"
            cipher: "aes-128-ctr"
            kdf: pbkdf2
            kdfparams:
              dklen: 32
              salt: "691e9ad0da2b44404f65e0a60cf6aabe3e92d2c23b7410fd187eeeb2c1de4a0d"
              c: 16384
              prf: hmac-sha256
            mac: "de651c04fc67fd552002b4235fa23ab2178d3a500caa7070b554168e73359610"
        - test
      response: "0x1ff25594a5e12c1e31ebd8112bdf107d217c1393da8dc7fc9d57696263457546"

  eth_sign:
    descr: |
      The sign method calculates an Ethereum specific signature with: 

      ```js
      sign(keccak256("\x19Ethereum Signed Message:\n" + len(message) + message))).
      ```

      By adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.

      For the address to sign a signer must be registered.
    params:
      account:
        descr: the account to sign with
        type: address
      message:
        descr: the message to sign
        type: bytes
    result:
      type: bytes
      descr: the signature (65 bytes) for the given message.
    example:
      request:
        - "0x9b2055d370f73ec7d8a03e965129118dc8f5bf83"
        - "0xdeadbeaf"
      response: "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"

  eth_signTransaction:
    descr: Signs a transaction that can be submitted to the network at a later time using with eth_sendRawTransaction.
    params:
      tx:
        descr: transaction to sign
        type: eth_transaction
    result:
      type: bytes
      descr: the raw signed transaction
    example:
      request:
        - data: "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
          from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155"
          gas: "0x76c0"
          gasPrice: "0x9184e72a000"
          to: "0xd46e8dd67c5d32be8058bb8eb970870f07244567"
          value: "0x9184e72a"
      response: "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"

  in3_get_internal_tx:
    descr: returns the internal transactions send during execution of the tx. Currently this only works with geth with activated `debug` module (supporting `debug_traceTransaction` ). Also when running a pruned node, the state of transaction is only available for limited time ( mostly 5 min)
    params:
      tx_hash:
        descr: the transactionhash
        type: bytes32
    result:
      descr: an array of internal transactions
      type: eth_internal_tx

    example:
      request:
        - "0x8f78eb6e9916a4f187b6761d67f56bf6a828b6f197c7443b753e404efa21c8b1"
      response:
        - op: CALL
          to: "0x1"
          value: "0x0"
          from: "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b"
          depth: 1
          gas: "0x277854"
        - op: DELEGATECALL
          to: "0xf9e266af4bca5890e2781812cc6a6e89495a79f2"
          value:
          from: "0xd3441e016ea14fd66ebd6a44ead7aac261dd6425"
          depth: 2
          gas: "0x181525"
        - op: CALL
          to: "0xa5409ec958c83c3f309868babaca7c86dcb077c1"
          value: "0x0"
          from: "0xd3441e016ea14fd66ebd6a44ead7aac261dd6425"
          depth: 3
          gas: "0x170850"
        - op: CALL
          to: "0x64dc7f3624a1456a7ba52025fcfddf428fff92e0"
          value: "0x0"
          from: "0xd3441e016ea14fd66ebd6a44ead7aac261dd6425"
          depth: 3
          gas: "0x169426"
