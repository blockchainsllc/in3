.only_rust:
  needs: []
  rules:
    - changes:
        - rust/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'

.only_deploy:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/'
      when: manual

.rust_multiarch:
  image: docker.slock.it/build-images/cmake:rust
  stage: rust
  extends: .only_rust
  tags:
    - short-jobs
  services:
    - docker:18.09-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    TARGET: ""
    BUILD_DIR: ""
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - export CROSS_DOCKER_IN_DOCKER=false
    - export RUST_BACKTRACE=1
    - export RUST_TEST_THREADS=1
    - export OPENSSL_DIR=/usr/lib/ssl
    - mkdir -p rust/in3-sys/in3-core/c
    - cp -r c/CMakeLists.txt c/*.cmake c/docs c/src c/include rust/in3-sys/in3-core/c/
    - cp CMakeLists.txt rust/in3-sys/in3-core/
    - cd rust/
    - export UPDATE_IN3_BINDINGS=1
    - cross run --example custom_transport --target $TARGET --release --jobs 8

rust_linux:
  extends: .rust_multiarch
  variables:
    TARGET: "x86_64-unknown-linux-gnu"
    BUILD_DIR: "gcc_legacy"
  needs:
    - gcc_legacy

rust_mac:
  extends: .rust_multiarch
  variables:
    TARGET: "x86_64-unknown-linux-gnu"
    BUILD_DIR: "mac_os"
  needs:
    - mac_os

rust_win:
  allow_failure: true
  extends: .rust_multiarch
  variables:
    TARGET: "x86_64-pc-windows-gnu"
    BUILD_DIR: "win_jni"
  needs:
    - win_jni

rust_arm7:
  extends: .rust_multiarch
  variables:
    TARGET: "armv7-unknown-linux-gnueabihf"
    BUILD_DIR: "arm_jni_build"
  needs:
    - arm_jni

rust_valgrind:
  image: docker.slock.it/build-images/cmake:rust
  stage: analysis
  extends: .only_rust
  variables:
    IN3_MODE: "DEBUG"
    VALGRIND_OPTS: "-v -q --num-callers=50  --main-stacksize=4000 --error-exitcode=1 --leak-check=full --show-leak-kinds=definite --suppressions=suppress.valgrind"
  script:
    - export RUST_BACKTRACE=1
    - mkdir -p rust/in3-sys/in3-core/c
    - cp -r c/CMakeLists.txt c/*.cmake c/docs c/src  c/include rust/in3-sys/in3-core/c/
    - cp CMakeLists.txt rust/in3-sys/in3-core/
    - export UPDATE_IN3_BINDINGS=1
    - cd rust
    - export IN3_MODE="DEBUG"
    - export RUST_TEST_THREADS=1
    - export IN3_MODE="RELEASE"
    - cargo test test_eth_api
    - export CARGO_MANIFEST_DIR=.
    - export IN3_MODE="DEBUG"
    - printf "{\n  ignore_libcrypto_conditional_jump_errors\n  Memcheck:Leak\n  ...\n  obj:*/libcrypto.so.*\n}\n"  > suppress.valgrind
    - export IN3_EXEC="`ls target/debug/deps/in3-* | grep -v "\.d" | xargs basename`"
    - valgrind $VALGRIND_OPTS target/debug/deps/$IN3_EXEC test_eth_api
  tags:
    - long-jobs

rust:
  image: docker.slock.it/build-images/cmake:clang14
  stage: bindings
  script:
    - export RUST_BACKTRACE=1
    - mkdir -p rust/in3-sys/in3-core/c
    - cp -r c/CMakeLists.txt c/*.cmake c/docs c/src  c/include rust/in3-sys/in3-core/c/
    - cp CMakeLists.txt rust/in3-sys/in3-core/
    - cd rust/
    - export UPDATE_IN3_BINDINGS=1
    - export IN3_MODE="RELEASE"
    - cargo install cargo2junit
    - cargo run --example custom_transport --release
    - RUST_TEST_THREADS=1 cargo test -- -Z unstable-options --format json | cargo2junit > ../rust_test.xml
  needs: []
  artifacts:
    reports:
      junit: rust_test.xml

deploy_rust:
  stage: deploy
  needs:
    - rust
  extends: .only_deploy
  before_script:
    - git config --global user.name "${GITHUB_USER_NAME}"
    - git config --global user.email "${GITHUB_USER_EMAIL}"
    - cargo login $CARGO_TOKEN
  script:
    - mkdir -p rust/in3-sys/in3-core/c
    - cp -r c/CMakeLists.txt c/*.cmake c/docs c/src  c/include rust/in3-sys/in3-core/c/
    - cp CMakeLists.txt rust/in3-sys/in3-core/
    - find rust -name 'Cargo.toml' -exec sed -i '' -e "s/version = \"0.0.0\"/version = \""${CI_COMMIT_TAG:1}"\"/g" {} \;
    - cd rust/
    - rm -rf in3-sys/in3-core/c/src/third-party/hidapi/
    - echo "" > in3-sys/.gitignore
    - cd in3-sys/ && cargo publish --allow-dirty
    - sleep 30
    - cd ../in3-rs/ && cargo publish --allow-dirty || echo "Not updating in3-rs, because no new version."
  tags:
    - mac-os
